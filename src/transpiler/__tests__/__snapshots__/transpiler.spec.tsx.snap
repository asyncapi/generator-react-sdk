// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Transpiler should transpile CommonJS files with a simple setup and import correctly 1`] = `
"'use strict';

var require$$0 = require('react');
var require$$1 = require('prop-types');
var require$$0$1 = require('path');
var require$$1$1 = require('fs');
var util_1 = require('util');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var require$$0__default = /*#__PURE__*/_interopDefaultLegacy(require$$0);
var require$$1__default = /*#__PURE__*/_interopDefaultLegacy(require$$1);
var require$$0__default$1 = /*#__PURE__*/_interopDefaultLegacy(require$$0$1);
var require$$1__default$1 = /*#__PURE__*/_interopDefaultLegacy(require$$1$1);
var util_1__default = /*#__PURE__*/_interopDefaultLegacy(util_1);

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function createCommonjsModule(fn, basedir, module) {
	return module = {
		path: basedir,
		exports: {},
		require: function (path, base) {
			return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
		}
	}, fn(module, module.exports), module.exports;
}

function commonjsRequire () {
	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
}

var File_1 = createCommonjsModule(function (module, exports) {

var __assign = commonjsGlobal && commonjsGlobal.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    \\"default\\": mod
  };
};

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});
exports.FilePropTypes = void 0;

var react_1 = __importDefault(require$$0__default['default']);

var prop_types_1 = __importDefault(require$$1__default['default']);

exports.FilePropTypes = {
  /**
   * \`fileName\` prop describes the filename for which should be used when generating the file. If none is specified the filename for the template are used.
   */
  name: prop_types_1[\\"default\\"].string,

  /**
   * \`permissions\` prop describes the permissions the file should be created with. This is interpreted as an octal number such as
   */
  permissions: prop_types_1[\\"default\\"].number
};
/**
 * Component is used to describe to the generator that you want a file to be created and rendered based on the defined children.
 *
 * @component
 * @example
 * const name = \\"test.js\\"
 * const permissions = 0o777
 * return (
 *   <File size={size} type={type}>Test</File>
 * )
 */

var File = function File(_a) {
  var name = _a.name,
      permissions = _a.permissions,
      children = _a.children;
  return react_1[\\"default\\"].createElement(react_1[\\"default\\"].Fragment, null, children);
};

File.propTypes = __assign({}, exports.FilePropTypes);
exports[\\"default\\"] = File;
});

var withIndendation_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});
exports.withIndendation = exports.IndentationTypes = void 0;
/**
 * Type of indentation to use
 * @readonly
 * @enum {string}
 * @property {string}  TABS   - indicate to use tabs as separator
 * @property {string}  SPACES - indicate to use spaces as separator
 */

var IndentationTypes;

(function (IndentationTypes) {
  IndentationTypes[\\"TABS\\"] = \\"tabs\\";
  IndentationTypes[\\"SPACES\\"] = \\"spaces\\";
})(IndentationTypes = exports.IndentationTypes || (exports.IndentationTypes = {}));
/**
 * Ensures indentations are prepended to content.
 * @private
 * @param {string} content to prepend the indentation
 * @param {number} size the number of indendations to use
 * @param {IndentationTypes} type the type of indendations to use. SPACES by default.
 * @returns {string}
 */


function withIndendation(content, size, type) {
  if (content === void 0) {
    content = '';
  }

  if (type === void 0) {
    type = IndentationTypes.SPACES;
  }

  if (size < 1) {
    return content;
  } // if the content includes new lines ensure that they have the added indentation as well.


  if (content.includes('\\\\n')) {
    var newLineArray = content.split('\\\\n');
    return newLineArray.reduce(function (accumulator, value) {
      var newValue = value.trim() === '' ? value : \\"\\" + getIndentation(size, type) + value;
      return accumulator === \\"\\" ? newValue : accumulator + \\"\\\\n\\" + newValue;
    }, \\"\\");
  }

  return \\"\\" + getIndentation(size, type) + content;
}

exports.withIndendation = withIndendation;
/**
 * Get the indendation string based on how many and which type of indentation are requested.
 * @private
 * @param {number} size the number of indendations to use
 * @param {IndentationTypes} type the type of indendations to use. SPACES by default.
 * @returns {string}
 */

function getIndentation(size, type) {
  if (size === void 0) {
    size = 0;
  }

  if (type === void 0) {
    type = IndentationTypes.SPACES;
  }

  var whitespaceChar = type === IndentationTypes.SPACES ? ' ' : '\\\\t';
  return Array(size).fill(whitespaceChar).join(\\"\\");
}
});

var withNewLines_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});
exports.withNewLines = void 0;
/**
 * Prepend given number of the new lines to content.
 * @private
 * @param {string} content
 * @param {number} number
 * @returns {string}
 */

function withNewLines(content, number) {
  if (content === void 0) {
    content = '';
  }

  if (number === void 0) {
    number = 0;
  }

  var newLines = Array(number).fill('\\\\n').join('');
  return content + newLines;
}

exports.withNewLines = withNewLines;
});

var getFilesInDir_1 = createCommonjsModule(function (module, exports) {

var __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator[\\"throw\\"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = commonjsGlobal && commonjsGlobal.__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function sent() {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    \\"throw\\": verb(1),
    \\"return\\": verb(2)
  }, typeof Symbol === \\"function\\" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError(\\"Generator is already executing.\\");

    while (_) {
      try {
        if (f = 1, y && (t = op[0] & 2 ? y[\\"return\\"] : op[0] ? y[\\"throw\\"] || ((t = y[\\"return\\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [op[0] & 2, t.value];

        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;

          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;

          case 7:
            op = _.ops.pop();

            _.trys.pop();

            continue;

          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }

            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }

            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }

            if (t && _.label < t[2]) {
              _.label = t[2];

              _.ops.push(op);

              break;
            }

            if (t[2]) _.ops.pop();

            _.trys.pop();

            continue;
        }

        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    \\"default\\": mod
  };
};

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});
exports.getFilesInDir = void 0;

var path_1 = __importDefault(require$$0__default$1['default']);

var fs_1 = __importDefault(require$$1__default$1['default']);



var readdir = util_1__default['default'].promisify(fs_1[\\"default\\"].readdir);
var stat = util_1__default['default'].promisify(fs_1[\\"default\\"].stat);

var GetFilesResponse =
/** @class */
function () {
  function GetFilesResponse(files, dirs) {
    this.files = files;
    this.dirs = dirs;
  }

  return GetFilesResponse;
}();
/**
 * Function which finds all the files in directories
 *
 * @param dir directory to find files in.
 * @param includeSubDirs should the function iterate through subdirectories to search for files?
 */


function getFilesInDir(dir) {
  return __awaiter(this, void 0, void 0, function () {
    var allFiles, files, dirs, _i, allFiles_1, filename, res, isDir, resolveFilenameCallback;

    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          return [4
          /*yield*/
          , readdir(dir)];

        case 1:
          allFiles = _a.sent();
          files = [];
          dirs = [];
          _i = 0, allFiles_1 = allFiles;
          _a.label = 2;

        case 2:
          if (!(_i < allFiles_1.length)) return [3
          /*break*/
          , 5];
          filename = allFiles_1[_i];
          res = path_1[\\"default\\"].resolve(dir, filename);
          return [4
          /*yield*/
          , stat(res)];

        case 3:
          isDir = _a.sent().isDirectory();

          if (isDir) {
            dirs.push(res);
          } else {
            files.push(res);
          }

          _a.label = 4;

        case 4:
          _i++;
          return [3
          /*break*/
          , 2];

        case 5:
          resolveFilenameCallback = function resolveFilenameCallback(filename) {
            return path_1[\\"default\\"].resolve(dir, filename);
          };

          files = files.map(resolveFilenameCallback);
          dirs = dirs.map(resolveFilenameCallback);
          return [2
          /*return*/
          , new GetFilesResponse(files, dirs)];
      }
    });
  });
}

exports.getFilesInDir = getFilesInDir;
});

var utils = createCommonjsModule(function (module, exports) {

var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function (m, exports) {
  for (var p in m) {
    if (p !== \\"default\\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
  }
};

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});

__exportStar(withIndendation_1, exports);

__exportStar(withNewLines_1, exports);

__exportStar(getFilesInDir_1, exports);
});

var Text_1 = createCommonjsModule(function (module, exports) {

var __assign = commonjsGlobal && commonjsGlobal.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    \\"default\\": mod
  };
};

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});
exports.TextPropTypes = void 0;

var react_1 = __importDefault(require$$0__default['default']);

var prop_types_1 = __importDefault(require$$1__default['default']);



exports.TextPropTypes = {
  /**
   * \`size\` prop expects a string which format should be a number which represent the number of \`type\`'s to indent each content. Default to no indentation.
   */
  size: prop_types_1[\\"default\\"].number,

  /**
   * \`type\` prop expects a string, you can use the \`IndentationTypes\` enum, as either \`TABS\` or \`SPACES\`. The \`type\` defaults to \`SPACES\`.
   */
  type: prop_types_1[\\"default\\"].oneOf(Object.values(utils.IndentationTypes)),

  /**
   * \`newLines\` prop represents the number of appended new lines. Default to one new line.
   */
  newLines: prop_types_1[\\"default\\"].number
};
/**
 * Component is for defining a group of text which should be rendered on the same line.
 *
 * @component
 * @example
 * const indent = 4
 * const type = IndentationTypes.SPACES
 * const newLines = 2
 * return (
 *   <Text indent={size} type={type} newLines={newLines}>Test</Text>
 * )
 */

var Text = function Text(_a) {
  var _b = _a.indent,
      indent = _b === void 0 ? 0 : _b,
      _c = _a.type,
      type = _c === void 0 ? utils.IndentationTypes.SPACES : _c,
      _d = _a.newLines,
      newLines = _d === void 0 ? 1 : _d,
      childrenContent = _a.childrenContent;
  var contentWithLines = utils.withNewLines(childrenContent, newLines);
  return react_1[\\"default\\"].createElement(react_1[\\"default\\"].Fragment, null, utils.withIndendation(contentWithLines, indent, type));
};

Text.propTypes = __assign({}, exports.TextPropTypes);
exports[\\"default\\"] = Text;
});

var Indent_1 = createCommonjsModule(function (module, exports) {

var __assign = commonjsGlobal && commonjsGlobal.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    \\"default\\": mod
  };
};

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});
exports.IndentPropTypes = void 0;

var react_1 = __importDefault(require$$0__default['default']);

var prop_types_1 = __importDefault(require$$1__default['default']);



exports.IndentPropTypes = {
  /**
   * \`size\` prop expects a string which format should be a number which represent the number of \`type\`'s to indent each content. Default to no indentation.
   */
  size: prop_types_1[\\"default\\"].number,

  /**
   * \`type\` prop expects a string, you can use the \`IndentationTypes\` enum, as either \`TABS\` or \`SPACES\`. The \`type\` defaults to \`SPACES\`.
   */
  type: prop_types_1[\\"default\\"].oneOf(Object.values(utils.IndentationTypes))
};
/**
 * Component is for wrapping multiple components and apply an indentation on those.
 *
 * It supports any form of nested components as well, meaning you can have as many nested \`Indent\` components as you would like.
 *
 * @component
 * @example
 * const size = 4
 * const type = IndentationTypes.SPACES
 * return (
 *   <Indent size={size} type={type}>test</Indent>
 * )
 */

var Indent = function Indent(_a) {
  var _b = _a.size,
      size = _b === void 0 ? 0 : _b,
      _c = _a.type,
      type = _c === void 0 ? utils.IndentationTypes.SPACES : _c,
      childrenContent = _a.childrenContent;
  return react_1[\\"default\\"].createElement(react_1[\\"default\\"].Fragment, null, utils.withIndendation(childrenContent, size, type));
};

Indent.propTypes = __assign({}, exports.IndentPropTypes);
exports[\\"default\\"] = Indent;
});

var components = createCommonjsModule(function (module, exports) {

var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    \\"default\\": mod
  };
};

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});
exports.Indent = exports.Text = exports.File = void 0;



Object.defineProperty(exports, \\"File\\", {
  enumerable: true,
  get: function get() {
    return __importDefault(File_1)[\\"default\\"];
  }
});



Object.defineProperty(exports, \\"Text\\", {
  enumerable: true,
  get: function get() {
    return __importDefault(Text_1)[\\"default\\"];
  }
});



Object.defineProperty(exports, \\"Indent\\", {
  enumerable: true,
  get: function get() {
    return __importDefault(Indent_1)[\\"default\\"];
  }
});
});

/* eslint-disable no-undef */


var File = components.File;

function greetings(name) {
  return \\"hello \\".concat(name);
} // eslint-disable-next-line react/display-name


var simple = function () {
  return /*#__PURE__*/require$$0__default['default'].createElement(File, null, greetings('Test'));
};

module.exports = simple;
//# sourceMappingURL=simple.js.map
"
`;

exports[`Transpiler should transpile ES5 files with a simple setup and import correctly 1`] = `
"'use strict';

var path = require('path');
var React = require('react');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var path__default = /*#__PURE__*/_interopDefaultLegacy(path);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

// eslint-disable-next-line security/detect-non-literal-require, no-undef

var _require = require(path__default['default'].resolve(__dirname, '../../../../components')),
    File = _require.File;

function greetings(name) {
  return \\"hello \\".concat(name);
} // eslint-disable-next-line react/display-name


function simple () {
  return /*#__PURE__*/React__default['default'].createElement(File, null, greetings('Test'));
}

module.exports = simple;
//# sourceMappingURL=simple.js.map
"
`;

exports[`Transpiler should transpile ES6 files with a simple setup and import correctly 1`] = `
"'use strict';

var path = require('path');
var React = require('react');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var path__default = /*#__PURE__*/_interopDefaultLegacy(path);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

// eslint-disable-next-line security/detect-non-literal-require, no-undef

var _require = require(path__default['default'].resolve(__dirname, '../../../../components')),
    File = _require.File;

var greetings = function greetings(name) {
  return \\"hello \\".concat(name);
}; // eslint-disable-next-line react/display-name


function simple () {
  return /*#__PURE__*/React__default['default'].createElement(File, null, greetings('Test'));
}

module.exports = simple;
//# sourceMappingURL=simple.js.map
"
`;
